# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Profile {
  id: ID!
  user: User
  avatarUrl: String
  avatarUrlKey: String
  deletedAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type RestaurantImage {
  id: ID!
  restaurant: Restaurant
  url: String!
  key: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Restaurant {
  id: ID!
  category: RestaurantCategory!
  user: [User!]
  restaurantImage: [RestaurantImage!]
  name: String!
  cnpj: String!
  email: String!
  mainPhone: String!
  secondaryPhone: String
  isWifi: Boolean!
  isParking: Boolean!
  isOpen: Boolean!
  start_hour: String!
  end_hour: String!
  weekend_start_hour: String!
  weekend_end_hour: String!
  capacity: Float!
  stripeAccountId: String
  deletedAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum RestaurantCategory {
  BRASILEIRO
  BISTRO
  BUFFET
  CAFETERIA
  CANTINA
  CLASSICO
  COMFORT
  AUTORAL
  FASTFOOD
  GRILL
  JAPONESA
  HAMBURGUERIA
  PIZZARIA
  JANTARFINO
  POPULAR
  POPUP
  PUB
  REDESDERESTAURANTE
  MEXICANO
  ITALIANO
  CHINES
  ESPANHOL
  PORTUGUES
  INGLES
  ARGENTINO
  FRUTOSDOMAR
  STEAKHOUSE
}

type User {
  id: ID!
  role: UserRole!
  profile: Profile
  restaurant: [Restaurant!]
  firstName: String!
  lastName: String!
  email: String!
  mainPhone: String!
  secondaryPhone: String!
  isRegisteredWithGoogle: Boolean!
  loginToken: String
  expirationLoginToken: String
  stripeCustomerId: String
  deletedAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum UserRole {
  USER
  OWNER
  EMPLOYEE
  MANAGER
}

type StripeCreateAccountLink {
  object: String!
  url: String!
}

type StripeCreateLoginLink {
  object: String!
  url: String!
}

type AuthType {
  user: User!
  loginToken: String!
}

type Query {
  getCurrentUser: User!
  createAccountLink(id: String!): StripeCreateAccountLink!
  createLoginLink(id: String!): StripeCreateLoginLink!
  getRestaurantById(id: String!): Restaurant!
  listManagersByRestaurant(restaurantId: String!): [User!]!
  listEmployeesByRestaurant(restaurantId: String!): [User!]!
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  updateUser(data: UpdateUserInput!): User!
  validateUser(data: ValidateUserInput!): AuthType!
  signin(data: SigninInput!): User!
  signinWithGoogle(data: GoogleAuthInput!): AuthType!
  createOwner(data: CreateOwnerInput!): User!
  createRestaurant(data: CreateRestaurantInput!): Restaurant!
  createManager(data: CreateManagerInput!): User!
  updateManager(data: UpdateManagerInput!): User!
  deleteManager(managerId: String!, restaurantId: String!): Boolean!
  createEmployee(data: CreateEmployeeInput!): User!
  deleteEmployee(restaurantId: String!, employeeId: String!): Boolean!
  updateEmployee(data: UpdateEmployeeInput!): User!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  mainPhone: String!
  secondaryPhone: String
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  mainPhone: String
  secondaryPhone: String
}

input ValidateUserInput {
  loginToken: String!
}

input SigninInput {
  email: String!
}

input GoogleAuthInput {
  token: String!
}

input CreateOwnerInput {
  firstName: String!
  lastName: String!
  email: String!
  mainPhone: String
  secondaryPhone: String
}

input CreateRestaurantInput {
  name: String!
  email: String!
  cnpj: String!
  mainPhone: String!
  secondaryPhone: String
  category: RestaurantCategory!
  isWifi: Boolean!
  isParking: Boolean!
  isOpen: Boolean!
  start_hour: String!
  end_hour: String!
  weekend_start_hour: String!
  weekend_end_hour: String!
  capacity: Float!
}

input CreateManagerInput {
  firstName: String!
  lastName: String!
  email: String!
  mainPhone: String
  secondaryPhone: String
  restaurantId: String!
}

input UpdateManagerInput {
  id: String!
  firstName: String
  lastName: String
  email: String
  mainPhone: String
  secondaryPhone: String
  restaurantId: String!
}

input CreateEmployeeInput {
  firstName: String!
  lastName: String!
  email: String!
  mainPhone: String
  secondaryPhone: String
  restaurantId: String!
}

input UpdateEmployeeInput {
  id: String!
  firstName: String
  lastName: String
  email: String
  mainPhone: String
  secondaryPhone: String
  restaurantId: String!
}