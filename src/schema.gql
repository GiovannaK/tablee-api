# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Profile {
  id: ID!
  user: User
  avatarUrl: String
  avatarUrlKey: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Table {
  id: ID!
  category: TableCategoryPortuguese!
  status: TableStatusPortuguese!
  booking: Booking
  restaurant: Restaurant
  tableNumber: Float!
  seats: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum TableCategoryPortuguese {
  INTERNA
  EXTERNA
  BAR
}

enum TableStatusPortuguese {
  DISPONIVEL
  OCUPADA
  INDISPONIVEL
}

type Review {
  id: ID!
  user: User
  booking: Booking
  rating: Float!
  comment: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BookingOrderCancellation {
  id: ID!
  bookingCancelStatus: BookingCancelOrder!
  booking: Booking
  price: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum BookingCancelOrder {
  processing
  succeeded
  amount_capturable_updated
  payment_failed
}

type Booking {
  id: ID!
  extras: String
  specialDate: SpecialDatePortuguese
  bookingStatus: BookingStatusPortuguese!
  user: User
  waitList: WaitList
  restaurant: Restaurant
  table: [Table!]
  review: Review
  bookingOrderCancellation: BookingOrderCancellation
  tableCategoryPreferences: [TableCategoryPortuguese!]!
  date: String!
  hour: String!
  partyFor: Float!
  isCancelledByUser: Boolean!
  isCancelledByRestaurant: Boolean!
  isConfirmed: Boolean!
  hasArrived: Boolean!
  code: String!
  createdByWaitList: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum SpecialDatePortuguese {
  ANIVERSARIO
  CELEBRACAO
  REFEICAO_NEGOCIOS
  ENCONTRO
}

enum BookingStatusPortuguese {
  PENDENTE
  APROVADA
  REJEITADA
  FINALIZADA
  CANCELADA
  TRANSCORRENDO
}

type WaitList {
  id: ID!
  restaurant: Restaurant
  booking: [Booking!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Favorite {
  id: ID!
  user: User
  restaurant: [Restaurant!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CancellationPolicy {
  id: ID!
  restaurant: Restaurant
  tax: Float!
  details: String!
  limitDaysToCancel: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RestaurantImage {
  id: ID!
  restaurant: Restaurant
  url: String!
  key: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MenuItem {
  id: ID!
  menu: Menu
  category: MenuItemCategoryPortuguese!
  name: String!
  description: String!
  price: Float!
  url: String!
  key: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum MenuItemCategoryPortuguese {
  BEBIDA_ALCOOLICA
  BEBIDA_SEM_ALCOOL
  PRATOPRINCIPAL
  SOBREMESA
  ENTRADA
}

type Menu {
  id: ID!
  restaurant: Restaurant
  menuItem: [MenuItem!]
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Address {
  id: ID!
  state: BrazilianStates!
  restaurant: Restaurant
  city: String!
  uf: String!
  postalCode: String!
  neighborhood: String!
  street: String!
  number: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum BrazilianStates {
  AC
  AL
  AP
  AM
  BA
  CE
  DF
  ES
  GO
  MA
  MT
  MS
  MG
  PA
  PB
  PR
  PE
  PI
  RJ
  RN
  RS
  RO
  RR
  SC
  SP
  SE
  TO
}

type Restaurant {
  id: ID!
  category: RestaurantCategory!
  dressCode: DressCodePortuguese!
  acceptedPaymentMethods: [PaymentTypesPortuguese!]!
  user: [User!]
  waitlist: WaitList
  favorite: Favorite
  cancellationPolicy: CancellationPolicy
  restaurantImage: [RestaurantImage!]
  menu: [Menu!]
  booking: [Booking!]
  address: Address
  name: String!
  cnpj: String!
  email: String!
  mainPhone: String!
  secondaryPhone: String
  isWifi: Boolean!
  isParking: Boolean!
  isOpen: Boolean!
  start_hour: String!
  end_hour: String!
  weekend_start_hour: String!
  weekend_end_hour: String!
  capacity: Float!
  brunch_start_hour: String!
  brunch_end_hour: String!
  lunch_start_hour: String!
  lunch_end_hour: String!
  dinner_start_hour: String!
  dinner_end_hour: String!
  isAvailableForBrunch: Boolean!
  isAvailableForLunch: Boolean!
  isAvailableForDinner: Boolean!
  stripeAccountId: String
  thumbUrl: String!
  thumbKey: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum RestaurantCategory {
  BRASILEIRO
  BISTRO
  BUFFET
  CAFETERIA
  CANTINA
  CLASSICO
  COMFORT
  AUTORAL
  FASTFOOD
  GRILL
  JAPONESA
  HAMBURGUERIA
  PIZZARIA
  JANTARFINO
  POPULAR
  POPUP
  PUB
  REDESDERESTAURANTE
  MEXICANO
  ITALIANO
  CHINES
  ESPANHOL
  PORTUGUES
  INGLES
  ARGENTINO
  FRUTOSDOMAR
  STEAKHOUSE
}

enum DressCodePortuguese {
  RESORT
  BUSINESS
  CASUAL
  FORMAL
}

enum PaymentTypesPortuguese {
  MASTERCARD
  VISA
  DISCOVER
  AMEX
  MONEY
}

type User {
  id: ID!
  role: UserRole!
  profile: Profile
  restaurant: [Restaurant!]
  review: [Review!]
  favorite: Favorite
  booking: [Booking!]
  firstName: String!
  lastName: String!
  email: String!
  mainPhone: String!
  secondaryPhone: String!
  isRegisteredWithGoogle: Boolean!
  loginToken: String
  expirationLoginToken: String
  stripeCustomerId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  lastAccess: DateTime!
}

enum UserRole {
  USER
  OWNER
  EMPLOYEE
  MANAGER
}

type StripeCreateAccountLink {
  object: String!
  url: String!
}

type StripeCreateLoginLink {
  object: String!
  url: String!
}

type AuthType {
  user: User!
  loginToken: String!
}

type UsersRestaurant {
  users: [User!]!
  count: Float!
}

type AddressWithRestaurant {
  restaurantId: String!
  restaurant: Restaurant!
  city: String!
  uf: String!
  postalCode: String!
  neighborhood: String!
  street: String!
  number: Float!
}

type MenuMenuItems {
  menuItem: [MenuItem!]!
  menu: Menu!
}

type BookingUserRestaurant {
  user: User!
  restaurant: Restaurant!
  booking: Booking!
}

type Query {
  getCurrentUser: User!
  createAccountLink(id: String!): StripeCreateAccountLink!
  createLoginLink(id: String!): StripeCreateLoginLink!
  getRestaurantById(id: String!): Restaurant!
  getUsersFromRestaurant(restaurantId: String!): UsersRestaurant!
  getUsersFromRole(restaurantId: String!, roles: [UserRole!]!): UsersRestaurant!
  listManagersByRestaurant(restaurantId: String!): [User!]!
  listEmployeesByRestaurant(restaurantId: String!): [User!]!
  getMenuWithItems(menuId: String!): MenuMenuItems!
  getMenu(menuId: String!): Menu!
  getMenuItem(menuItemId: String!): MenuItem!
  getCurrentUserBookings: [Booking!]!
  getRestaurantBookings(restaurantId: String!): [Booking!]!
  getRestaurantBookingsByStatus(restaurantId: String!, status: String!): [Booking!]!
  getRestaurantBookingsByUser: [Booking!]!
  tablesByRestaurant(restaurantId: String!): [Table!]!
  findAllReviews: [Review!]!
  findAllReviewsByRestaurant(restaurantId: String!): [Review!]!
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  updateUser(data: UpdateUserInput!): User!
  validateUser(data: ValidateUserInput!): AuthType!
  signin(data: SigninInput!): User!
  signinWithGoogle(data: GoogleAuthInput!): AuthType!
  createOwner(data: CreateOwnerInput!): User!
  createRestaurant(data: CreateRestaurantInput!): Restaurant!
  updateRestaurant(data: UpdateRestaurantInput!, restaurantId: String!): Restaurant!
  createManager(data: CreateManagerInput!): User!
  updateManager(data: UpdateManagerInput!): User!
  deleteManager(managerId: String!, restaurantId: String!): Boolean!
  createEmployee(data: CreateEmployeeInput!): User!
  deleteEmployee(restaurantId: String!, employeeId: String!): Boolean!
  updateEmployee(data: UpdateEmployeeInput!): User!
  createAddress(data: CreateAddressInput!): AddressWithRestaurant!
  updateAddress(data: UpdateAddressInput!): Address!
  createMenu(data: CreateMenuInput!): Menu!
  createMenuItem(data: CreateMenuItemInput!): MenuItem!
  updateMenu(data: UpdateMenuInput!): Menu!
  updateMenuItem(data: UpdateMenuItemInput!): MenuItem!
  deleteMenu(id: String!, restaurantId: String!): Boolean!
  deleteMenuItem(id: String!, restaurantId: String!): Boolean!
  createBooking(data: CreateBookingInput!): BookingUserRestaurant!
  approveBooking(restaurantId: String!, bookingId: String!): BookingUserRestaurant!
  rejectBooking(restaurantId: String!, bookingId: String!): BookingUserRestaurant!
  bookingOnGoing(data: BookingOngoingInput!): Booking!
  createTable(data: CreateTableInput!): Table!
  createMultipleTables(data: CreateTableInput!, quantity: Float!, initialTableNumber: Float!): [Table!]!
  deleteTable(tableId: String!): Boolean!
  deleteTablesInBulk(tableIds: [String!]!): Boolean!
  assignTable(tableId: String!, bookingId: String!): Table!
  createReview(data: CreateReviewInput!): Review!
  finishBooking(bookingId: String!, restaurantId: String!): Booking!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  mainPhone: String!
  secondaryPhone: String
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  mainPhone: String
  secondaryPhone: String
}

input ValidateUserInput {
  loginToken: String!
}

input SigninInput {
  email: String!
}

input GoogleAuthInput {
  token: String!
}

input CreateOwnerInput {
  firstName: String!
  lastName: String!
  email: String!
  mainPhone: String
  secondaryPhone: String
}

input CreateRestaurantInput {
  name: String!
  email: String!
  cnpj: String!
  mainPhone: String!
  secondaryPhone: String
  category: RestaurantCategory!
  isWifi: Boolean!
  isParking: Boolean!
  isOpen: Boolean!
  start_hour: String!
  end_hour: String!
  weekend_start_hour: String!
  weekend_end_hour: String!
  capacity: Float!
  brunch_start_hour: String!
  brunch_end_hour: String!
  lunch_start_hour: String!
  lunch_end_hour: String!
  dinner_start_hour: String!
  dinner_end_hour: String!
  isAvailableForBrunch: Boolean!
  isAvailableForLunch: Boolean!
  isAvailableForDinner: Boolean!
}

input UpdateRestaurantInput {
  name: String
  email: String
  cnpj: String
  mainPhone: String
  secondaryPhone: String
  category: RestaurantCategory
  isWifi: Boolean
  isParking: Boolean
  isOpen: Boolean
  start_hour: String
  end_hour: String
  weekend_start_hour: String
  weekend_end_hour: String
  capacity: Float
  brunch_start_hour: String
  brunch_end_hour: String
  lunch_start_hour: String
  lunch_end_hour: String
  dinner_start_hour: String
  dinner_end_hour: String
  isAvailableForBrunch: Boolean
  isAvailableForLunch: Boolean
  isAvailableForDinner: Boolean
}

input CreateManagerInput {
  firstName: String!
  lastName: String!
  email: String!
  mainPhone: String
  secondaryPhone: String
  restaurantId: String!
}

input UpdateManagerInput {
  id: String!
  firstName: String
  lastName: String
  email: String
  mainPhone: String
  secondaryPhone: String
  restaurantId: String!
}

input CreateEmployeeInput {
  firstName: String!
  lastName: String!
  email: String!
  mainPhone: String
  secondaryPhone: String
  restaurantId: String!
}

input UpdateEmployeeInput {
  id: String!
  firstName: String
  lastName: String
  email: String
  mainPhone: String
  secondaryPhone: String
  restaurantId: String!
}

input CreateAddressInput {
  restaurantId: String!
  city: String!
  uf: String!
  postalCode: String!
  neighborhood: String!
  street: String!
  number: Float!
}

input UpdateAddressInput {
  restaurantId: String!
  id: String!
  city: String
  uf: String
  postalCode: String
  neighborhood: String
  street: String
  number: Float
}

input CreateMenuInput {
  title: String!
  restaurantId: String!
}

input CreateMenuItemInput {
  name: String!
  description: String!
  price: Float!
  category: String!
  menuId: String!
  restaurantId: String!
}

input UpdateMenuInput {
  id: String!
  title: String
  restaurantId: String!
}

input UpdateMenuItemInput {
  id: String!
  name: String
  description: String
  price: Float
  category: String
  restaurantId: String!
}

input CreateBookingInput {
  date: String!
  hour: String!
  extras: String
  restaurantId: String!
  partyFor: Float!
  specialDate: String
  tableCategoryPreferences: [TableCategoryPortuguese!]
}

input BookingOngoingInput {
  code: String!
  bookingId: String!
}

input CreateTableInput {
  tableNumber: Float
  category: String!
  seats: Float!
  status: String
  restaurantId: String!
}

input CreateReviewInput {
  rating: Float!
  comment: String!
  bookingId: String!
}

type Subscription {
  bookingAdded(restaurantId: String!): BookingUserRestaurant!
  bookingApproved(restaurantId: String!): BookingUserRestaurant!
  bookingReject(restaurantId: String!): BookingUserRestaurant!
}